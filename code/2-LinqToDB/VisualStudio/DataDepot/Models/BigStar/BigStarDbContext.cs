// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace BigStarLib.Models;

public partial class BigStarDbContext : DbContext
{
	string _connectionString;
	// This constructor is simpler and more robust. Use it if LINQPad errors on the constructor above.
	// Note that _connectionString is picked up in the OnConfiguring method below.
	public BigStarDbContext(string connectionString) => _connectionString = connectionString;

	// This constructor obtains the connection string from your appsettings.json file.
	// Tell LINQPad to use it if you don't want to specify a connection string in LINQPad's dialog.
	public BigStarDbContext() {
		IConfiguration config = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build();
		_connectionString = config.GetConnectionString("BigStarConnection");
	}


	public BigStarDbContext(DbContextOptions<BigStarDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Alien> Aliens { get; set; }

    public virtual DbSet<CardFamily> CardFamilies { get; set; }

    public virtual DbSet<CollectibleCard> CollectibleCards { get; set; }

    public virtual DbSet<Monster> Monsters { get; set; }

    public virtual DbSet<Robot> Robots { get; set; }

    public virtual DbSet<Team> Teams { get; set; }


  protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) {
		// Assign _connectionString to the optionsBuilder:
		if (_connectionString != null)
			optionsBuilder.UseSqlite(_connectionString);    // Change to UseSqlite if you're using SQLite

    // Recommended: uncomment the following line to enable lazy-loading navigation hyperlinks in LINQPad:
    if (InsideLINQPad) optionsBuilder.UseLazyLoadingProxies();
    // (You'll need to add a reference to the Microsoft.EntityFrameworkCore.Proxies NuGet package, and
    //  mark your navigation properties as virtual.)

    // Recommended: uncomment the following line to enable the SQL trace window:
    if (InsideLINQPad) optionsBuilder.EnableSensitiveDataLogging(true);

   
	}
	// This property indicates whether or not you're running inside LINQPad:
	internal bool InsideLINQPad => AppDomain.CurrentDomain.FriendlyName.StartsWith("LINQPad");

	protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Alien>(entity =>
        {
            entity.HasKey(e => e.CardId);

            entity.Property(e => e.CardId).ValueGeneratedNever();
            entity.Property(e => e.DreamJob)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(150)");
            entity.Property(e => e.FavoriteEarthFood)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(150)");
            entity.Property(e => e.Locomotion)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(50)");
            entity.Property(e => e.Planet)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(50)");

            entity.HasOne(d => d.Card).WithOne(p => p.AlienCard)
                .HasForeignKey<Alien>(d => d.CardId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Family).WithMany(p => p.AlienFamilies)
                .HasForeignKey(d => d.FamilyId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<CardFamily>(entity =>
        {
            entity.HasKey(e => e.FamilyId);

            entity.Property(e => e.FamilyId).ValueGeneratedNever();
            entity.Property(e => e.FamilyType)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(15)");
        });

        modelBuilder.Entity<CollectibleCard>(entity =>
        {
            entity.HasKey(e => e.CardId);

            entity.HasIndex(e => new { e.CardId, e.FamilyId }, "CollectibleCards_CardAltPK")
                .IsUnique()
                .IsDescending();

            entity.Property(e => e.BidPrice).HasColumnType("numeric");
            entity.Property(e => e.CardName)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(50)");
            entity.Property(e => e.CatalogPrice).HasColumnType("numeric");
            entity.Property(e => e.Description)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(1200)");
            entity.Property(e => e.ImageName)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(150)");
            entity.Property(e => e.Slogan)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(150)");
            entity.Property(e => e.TeamName)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(15)");

            entity.HasOne(d => d.Family).WithMany(p => p.CollectibleCards)
                .HasForeignKey(d => d.FamilyId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.TeamNameNavigation).WithMany(p => p.CollectibleCards).HasForeignKey(d => d.TeamName);
        });

        modelBuilder.Entity<Monster>(entity =>
        {
            entity.HasKey(e => e.CardId);

            entity.Property(e => e.CardId).ValueGeneratedNever();
            entity.Property(e => e.Antenna).HasColumnType("bit");
            entity.Property(e => e.Spikes).HasColumnType("bit");

            entity.HasOne(d => d.Card).WithOne(p => p.MonsterCard)
                .HasForeignKey<Monster>(d => d.CardId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Family).WithMany(p => p.MonsterFamilies)
                .HasForeignKey(d => d.FamilyId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Team>(entity =>
        {
            entity.HasKey(e => e.TeamName);

            entity.Property(e => e.TeamName)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(15)");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}