// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace ToursLib.Models;

public partial class ToursDbContext : DbContext
{
    //public ToursDbContext()
    //{
    //}

    public ToursDbContext(DbContextOptions<ToursDbContext> options)
        : base(options)
    {
    }

	string _connectionString;
	// This constructor is simpler and more robust. Use it if LINQPad errors on the constructor above.
	// Note that _connectionString is picked up in the OnConfiguring method below.
	public ToursDbContext(string connectionString) => _connectionString = connectionString;

	// This constructor obtains the connection string from your appsettings.json file.
	// Tell LINQPad to use it if you don't want to specify a connection string in LINQPad's dialog.
	public ToursDbContext() {
		IConfiguration config = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build();
		_connectionString = config.GetConnectionString("ToursConnection");
	}

	public virtual DbSet<Testimonial> Testimonials { get; set; }

    public virtual DbSet<Tour> Tours { get; set; }

    public virtual DbSet<TravelTip> TravelTips { get; set; }

	protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) {
		// Assign _connectionString to the optionsBuilder:
		if (_connectionString != null)
			optionsBuilder.UseSqlite(_connectionString);    // Change to UseSqlite if you're using SQLite

		// Recommended: uncomment the following line to enable lazy-loading navigation hyperlinks in LINQPad:
		if (InsideLINQPad) optionsBuilder.UseLazyLoadingProxies();
		// (You'll need to add a reference to the Microsoft.EntityFrameworkCore.Proxies NuGet package, and
		//  mark your navigation properties as virtual.)

		// Recommended: uncomment the following line to enable the SQL trace window:
		if (InsideLINQPad) optionsBuilder.EnableSensitiveDataLogging(true);


	}
	// This property indicates whether or not you're running inside LINQPad:
	internal bool InsideLINQPad => AppDomain.CurrentDomain.FriendlyName.StartsWith("LINQPad");
	protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Testimonial>(entity =>
        {
            entity.Property(e => e.Comment)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(2000)");
            entity.Property(e => e.CustomerName)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(100)");
        });

        modelBuilder.Entity<Tour>(entity =>
        {
            entity.Property(e => e.Description)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(2000)");
            entity.Property(e => e.KidFriendly).HasColumnType("bit");
            entity.Property(e => e.MultiDay).HasColumnType("bit");
            entity.Property(e => e.Region)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(50)");
            entity.Property(e => e.SeniorDiscountAvailable).HasColumnType("bit");
            entity.Property(e => e.TourImagePath)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(250)");
            entity.Property(e => e.TourName)
                .UseCollation("NOCASE")
                .HasColumnType("char(150)");
        });

        modelBuilder.Entity<TravelTip>(entity =>
        {
            entity.HasKey(e => e.TipId);

            entity.Property(e => e.Headline)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(250)");
            entity.Property(e => e.TipText)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(2000)");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}